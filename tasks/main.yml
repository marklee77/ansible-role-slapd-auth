---
- name: configure ldap domain through debconf
  debconf:
    name: slapd
    question: slapd/domain
    vtype: string
    value: "{{ ldap_domain }}"

- name: configure ldap organization through debconf
  debconf:
    name: slapd
    question: shared/organization
    vtype: string
    value: "{{ ldap_domain }}"

# cannot retrieve original value and will not change password without force, so
# report no change.
- name: configure ldap password through debconf
  debconf:
    name: slapd
    question: slapd/password1
    vtype: password
    value: "{{ ldap_admin_password }}"
  changed_when: false

# cannot retrieve original value and will not change password without force, so
# report no change.
- name: confirm ldap password through debconf
  debconf:
    name: slapd
    question: slapd/password2
    vtype: password
    value: "{{ ldap_admin_password }}"
  changed_when: false

- name: ensure ldap server packages are installed
  apt: 
    pkg: "{{ item }}" 
    state: latest 
    update_cache: yes 
    cache_valid_time: 600
  with_items:
    - ldap-utils
    - ldapscripts
    - slapd
    - ssl-cert

# FIXME: dpkg seems broken
#- name: enforce desired slapd package configuration
#  dpkg_reconfigure:
#    pkg: slapd
#    answers:
#      slapd/domain: "{{ ldap_domain }}"
#      shared/organization: "{{ ldap_domain }}"
#      slapd/password1: "{{ ldap_admin_password }}"
#      slapd/password2: "{{ ldap_admin_password }}"

- name: ensure openldap user exists and is a member of the ssl-cert group
  user:
    name: openldap
    append: yes
    groups: ssl-cert
    state: present
  notify:
    - restart slapd

- name: enforce slapd services in /etc/default/slapd
  lineinfile:
    dest: /etc/default/slapd
    regexp: '^SLAPD_SERVICES='
    line: 'SLAPD_SERVICES="{{ slapd_services }}"'
  notify:
    - restart slapd

- name: ensure slapd is started and enabled
  service:
    name: slapd
    state: started
    enabled: yes
    
- name: ensure ssl is configured in ldap if certificates are available
  ldap:
    entry_dn: cn=config
    attributes:
      - olcTLSCipherSuite: "{{ slapd_ssl_cipher_suite }}"
      - olcTLSCACertificateFile: "{{ slapd_ssl_ca_cert_file }}"
      - olcTLSCertificateFile: "{{ slapd_ssl_cert_file }}"
      - olcTLSCertificateKeyFile: "{{ slapd_ssl_key_file }}"
    state: present
  notify:
    - restart slapd
  when: slapd_ssl_cert_file != "" and slapd_ssl_key_file != ""

- name: ensure ssl is not configured in ldap if certificates are not available
  ldap:
    entry_dn: cn=config
    attributes:
      - olcTLSCipherSuite
      - olcTLSCACertificateFile
      - olcTLSCertificateFile
      - olcTLSCertificateKeyFile
    modify_action: delete
    state: present
  notify:
    - restart slapd
  when: slapd_ssl_cert_file == "" or slapd_ssl_key_file == ""

- name: ensure ldap requires ssl if desired
  ldap:
    entry_dn: cn=config
    attributes:
      - olcLocalSSF: 128
      - olcSecurity: ssf=128
    state: present
  notify:
    - restart slapd
  when: ldap_require_ssl

- name: ensure ldap membership overlay module is enabled
  ldap:
    entry_dn: cn=module,cn=config
    search_base: cn=config
    search_filter: '(olcModuleLoad~=memberof.la)'
    strip_braces: yes
    attributes:
      - cn: module
      - objectClass: top
      - objectClass: olcModuleList
      - olcModuleLoad: memberof.la
      - olcModulePath: /usr/lib/ldap
    state: present
  notify:
    - restart slapd
 
- name: ensure ldap membership overlay is activated for default database
  ldap:
    entry_dn: olcOverlay=memberof,olcDatabase=hdb,cn=config
    strip_braces: yes
    attributes:
      - objectClass: olcConfig
      - objectClass: olcMemberOf
      - objectClass: olcOverlayConfig
      - objectClass: top
      - olcOverlay: memberof
    state: present
  notify:
    - restart slapd

#- name: ensure ldap membership referential integrity module is enabled
#  ldap:
#    entry_dn: cn=module,cn=config
#    attributes:
#      - cn: module
#      - objectclass: olcModuleList
#      - objectclass: top
#      - olcmoduleload: refint.la
#      - olcmodulepath: /usr/lib/ldap
#    state: present
#  notify:
#    - restart slapd

#- name: ensure ldap referential integrity overlay is activated for default database
#  ldap:
#    entry_dn: olcOverlay={1}refint,olcDatabase={1}hdb,cn=config
#    attributes:
#      - objectClass: olcConfig
#      - objectClass: olcOverlayConfig
#      - objectClass: olcRefintConfig
#      - objectClass: top
#      - olcOverlay: "{1}refint"
#      - olcRefintAttribute: memberof member manager owner
#    state: present
#  notify:
#    - restart slapd

- name: ensure expected organizational units are present in ldap
  ldap:
    bind_dn: cn=admin,{{ ldap_base_dn }}
    bind_password: "{{ ldap_admin_password }}" 
    entry_dn: ou={{ item }},{{ ldap_base_dn }}
    attributes:
      - objectClass: organizationalUnit
      - ou: "{{ item }}"
    state: present
  with_items:
    - users
    - groups
    - machines

- name: update /etc/ldapscripts/ldapscripts.conf from template
  template:
    src: etc/ldapscripts/ldapscripts.conf
    dest: /etc/ldapscripts/ldapscripts.conf
    owner: root
    group: root
    mode: 0644

- name: update /etc/ldapscripts/ldapscripts.passwd from template
  template:
    src: etc/ldapscripts/ldapscripts.passwd
    dest: /etc/ldapscripts/ldapscripts.passwd
    owner: root
    group: root
    mode: 0600

